// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FunSetting is an object representing the database table.
type FunSetting struct {
	GuildID    int64  `boil:"guild_id" json:"guild_id" toml:"guild_id" yaml:"guild_id"`
	Topics     string `boil:"topics" json:"topics" toml:"topics" yaml:"topics"`
	NSFWTopics string `boil:"nsfw_topics" json:"nsfw_topics" toml:"nsfw_topics" yaml:"nsfw_topics"`
	DadJokes   string `boil:"dad_jokes" json:"dad_jokes" toml:"dad_jokes" yaml:"dad_jokes"`
	Wyrs       string `boil:"wyrs" json:"wyrs" toml:"wyrs" yaml:"wyrs"`
	NSFWWyrs   string `boil:"nsfw_wyrs" json:"nsfw_wyrs" toml:"nsfw_wyrs" yaml:"nsfw_wyrs"`
	PChannel   int64  `boil:"p_channel" json:"p_channel" toml:"p_channel" yaml:"p_channel"`
	PRole      int64  `boil:"p_role" json:"p_role" toml:"p_role" yaml:"p_role"`

	R *funSettingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L funSettingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FunSettingColumns = struct {
	GuildID    string
	Topics     string
	NSFWTopics string
	DadJokes   string
	Wyrs       string
	NSFWWyrs   string
	PChannel   string
	PRole      string
}{
	GuildID:    "guild_id",
	Topics:     "topics",
	NSFWTopics: "nsfw_topics",
	DadJokes:   "dad_jokes",
	Wyrs:       "wyrs",
	NSFWWyrs:   "nsfw_wyrs",
	PChannel:   "p_channel",
	PRole:      "p_role",
}

var FunSettingTableColumns = struct {
	GuildID    string
	Topics     string
	NSFWTopics string
	DadJokes   string
	Wyrs       string
	NSFWWyrs   string
	PChannel   string
	PRole      string
}{
	GuildID:    "fun_settings.guild_id",
	Topics:     "fun_settings.topics",
	NSFWTopics: "fun_settings.nsfw_topics",
	DadJokes:   "fun_settings.dad_jokes",
	Wyrs:       "fun_settings.wyrs",
	NSFWWyrs:   "fun_settings.nsfw_wyrs",
	PChannel:   "fun_settings.p_channel",
	PRole:      "fun_settings.p_role",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var FunSettingWhere = struct {
	GuildID    whereHelperint64
	Topics     whereHelperstring
	NSFWTopics whereHelperstring
	DadJokes   whereHelperstring
	Wyrs       whereHelperstring
	NSFWWyrs   whereHelperstring
	PChannel   whereHelperint64
	PRole      whereHelperint64
}{
	GuildID:    whereHelperint64{field: "\"fun_settings\".\"guild_id\""},
	Topics:     whereHelperstring{field: "\"fun_settings\".\"topics\""},
	NSFWTopics: whereHelperstring{field: "\"fun_settings\".\"nsfw_topics\""},
	DadJokes:   whereHelperstring{field: "\"fun_settings\".\"dad_jokes\""},
	Wyrs:       whereHelperstring{field: "\"fun_settings\".\"wyrs\""},
	NSFWWyrs:   whereHelperstring{field: "\"fun_settings\".\"nsfw_wyrs\""},
	PChannel:   whereHelperint64{field: "\"fun_settings\".\"p_channel\""},
	PRole:      whereHelperint64{field: "\"fun_settings\".\"p_role\""},
}

// FunSettingRels is where relationship names are stored.
var FunSettingRels = struct {
}{}

// funSettingR is where relationships are stored.
type funSettingR struct {
}

// NewStruct creates a new relationship struct
func (*funSettingR) NewStruct() *funSettingR {
	return &funSettingR{}
}

// funSettingL is where Load methods for each relationship are stored.
type funSettingL struct{}

var (
	funSettingAllColumns            = []string{"guild_id", "topics", "nsfw_topics", "dad_jokes", "wyrs", "nsfw_wyrs", "p_channel", "p_role"}
	funSettingColumnsWithoutDefault = []string{"guild_id", "topics", "nsfw_topics", "dad_jokes", "wyrs", "nsfw_wyrs"}
	funSettingColumnsWithDefault    = []string{"p_channel", "p_role"}
	funSettingPrimaryKeyColumns     = []string{"guild_id"}
	funSettingGeneratedColumns      = []string{}
)

type (
	// FunSettingSlice is an alias for a slice of pointers to FunSetting.
	// This should almost always be used instead of []FunSetting.
	FunSettingSlice []*FunSetting

	funSettingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	funSettingType                 = reflect.TypeOf(&FunSetting{})
	funSettingMapping              = queries.MakeStructMapping(funSettingType)
	funSettingPrimaryKeyMapping, _ = queries.BindMapping(funSettingType, funSettingMapping, funSettingPrimaryKeyColumns)
	funSettingInsertCacheMut       sync.RWMutex
	funSettingInsertCache          = make(map[string]insertCache)
	funSettingUpdateCacheMut       sync.RWMutex
	funSettingUpdateCache          = make(map[string]updateCache)
	funSettingUpsertCacheMut       sync.RWMutex
	funSettingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single funSetting record from the query using the global executor.
func (q funSettingQuery) OneG(ctx context.Context) (*FunSetting, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single funSetting record from the query.
func (q funSettingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FunSetting, error) {
	o := &FunSetting{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for fun_settings")
	}

	return o, nil
}

// AllG returns all FunSetting records from the query using the global executor.
func (q funSettingQuery) AllG(ctx context.Context) (FunSettingSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all FunSetting records from the query.
func (q funSettingQuery) All(ctx context.Context, exec boil.ContextExecutor) (FunSettingSlice, error) {
	var o []*FunSetting

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to FunSetting slice")
	}

	return o, nil
}

// CountG returns the count of all FunSetting records in the query using the global executor
func (q funSettingQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all FunSetting records in the query.
func (q funSettingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count fun_settings rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q funSettingQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q funSettingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if fun_settings exists")
	}

	return count > 0, nil
}

// FunSettings retrieves all the records using an executor.
func FunSettings(mods ...qm.QueryMod) funSettingQuery {
	mods = append(mods, qm.From("\"fun_settings\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"fun_settings\".*"})
	}

	return funSettingQuery{q}
}

// FindFunSettingG retrieves a single record by ID.
func FindFunSettingG(ctx context.Context, guildID int64, selectCols ...string) (*FunSetting, error) {
	return FindFunSetting(ctx, boil.GetContextDB(), guildID, selectCols...)
}

// FindFunSetting retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFunSetting(ctx context.Context, exec boil.ContextExecutor, guildID int64, selectCols ...string) (*FunSetting, error) {
	funSettingObj := &FunSetting{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"fun_settings\" where \"guild_id\"=$1", sel,
	)

	q := queries.Raw(query, guildID)

	err := q.Bind(ctx, exec, funSettingObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from fun_settings")
	}

	return funSettingObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *FunSetting) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FunSetting) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no fun_settings provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(funSettingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	funSettingInsertCacheMut.RLock()
	cache, cached := funSettingInsertCache[key]
	funSettingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			funSettingAllColumns,
			funSettingColumnsWithDefault,
			funSettingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(funSettingType, funSettingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(funSettingType, funSettingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"fun_settings\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"fun_settings\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into fun_settings")
	}

	if !cached {
		funSettingInsertCacheMut.Lock()
		funSettingInsertCache[key] = cache
		funSettingInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single FunSetting record using the global executor.
// See Update for more documentation.
func (o *FunSetting) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the FunSetting.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FunSetting) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	funSettingUpdateCacheMut.RLock()
	cache, cached := funSettingUpdateCache[key]
	funSettingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			funSettingAllColumns,
			funSettingPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update fun_settings, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"fun_settings\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, funSettingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(funSettingType, funSettingMapping, append(wl, funSettingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update fun_settings row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for fun_settings")
	}

	if !cached {
		funSettingUpdateCacheMut.Lock()
		funSettingUpdateCache[key] = cache
		funSettingUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q funSettingQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q funSettingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for fun_settings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for fun_settings")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o FunSettingSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FunSettingSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), funSettingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"fun_settings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, funSettingPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in funSetting slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all funSetting")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *FunSetting) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FunSetting) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no fun_settings provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(funSettingColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	funSettingUpsertCacheMut.RLock()
	cache, cached := funSettingUpsertCache[key]
	funSettingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			funSettingAllColumns,
			funSettingColumnsWithDefault,
			funSettingColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			funSettingAllColumns,
			funSettingPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert fun_settings, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(funSettingPrimaryKeyColumns))
			copy(conflict, funSettingPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"fun_settings\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(funSettingType, funSettingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(funSettingType, funSettingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert fun_settings")
	}

	if !cached {
		funSettingUpsertCacheMut.Lock()
		funSettingUpsertCache[key] = cache
		funSettingUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single FunSetting record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *FunSetting) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single FunSetting record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FunSetting) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FunSetting provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), funSettingPrimaryKeyMapping)
	sql := "DELETE FROM \"fun_settings\" WHERE \"guild_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from fun_settings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for fun_settings")
	}

	return rowsAff, nil
}

func (q funSettingQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q funSettingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no funSettingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from fun_settings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for fun_settings")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o FunSettingSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FunSettingSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), funSettingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"fun_settings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, funSettingPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from funSetting slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for fun_settings")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *FunSetting) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no FunSetting provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FunSetting) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFunSetting(ctx, exec, o.GuildID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FunSettingSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty FunSettingSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FunSettingSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FunSettingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), funSettingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"fun_settings\".* FROM \"fun_settings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, funSettingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FunSettingSlice")
	}

	*o = slice

	return nil
}

// FunSettingExistsG checks if the FunSetting row exists.
func FunSettingExistsG(ctx context.Context, guildID int64) (bool, error) {
	return FunSettingExists(ctx, boil.GetContextDB(), guildID)
}

// FunSettingExists checks if the FunSetting row exists.
func FunSettingExists(ctx context.Context, exec boil.ContextExecutor, guildID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"fun_settings\" where \"guild_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, guildID)
	}
	row := exec.QueryRowContext(ctx, sql, guildID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if fun_settings exists")
	}

	return exists, nil
}

// Exists checks if the FunSetting row exists.
func (o *FunSetting) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return FunSettingExists(ctx, exec, o.GuildID)
}
